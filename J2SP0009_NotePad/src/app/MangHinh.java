/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package app;

import com.sun.glass.events.KeyEvent;
import java.awt.Font;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.PrintWriter;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;

/**
 *
 * @author hi
 */
public class MangHinh extends javax.swing.JFrame {

    /**
     * Creates new form MangHinh
     */
    Font theFont = new Font("Lucida Console",Font.PLAIN,30);
    Font theFontSan = new Font("SansSerif",Font.PLAIN,20);
    String storeText = null;
    String oldText = "";
    String fileDicrectory;
    boolean change = false;
    boolean fileDoesExist = false;
    public MangHinh() {
        initComponents();
        txtArea.setFont(theFont);
        jMenu1.setFont(theFontSan);
        jMenu2.setFont(theFontSan);
        this.setSize(900,900);
        KeyStroke ctrC = KeyStroke.getKeyStroke(KeyEvent.VK_C,  Toolkit.getDefaultToolkit ().getMenuShortcutKeyMask());
        KeyStroke ctrX = KeyStroke.getKeyStroke(KeyEvent.VK_X,  Toolkit.getDefaultToolkit ().getMenuShortcutKeyMask());
        KeyStroke ctrV = KeyStroke.getKeyStroke(KeyEvent.VK_V,  Toolkit.getDefaultToolkit ().getMenuShortcutKeyMask());
        KeyStroke ctrA = KeyStroke.getKeyStroke(KeyEvent.VK_A,  Toolkit.getDefaultToolkit ().getMenuShortcutKeyMask());
        KeyStroke ctrO = KeyStroke.getKeyStroke(KeyEvent.VK_O, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask());
        KeyStroke ctrS = KeyStroke.getKeyStroke(KeyEvent.VK_S, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask());
        
        miCopy.setAccelerator(ctrC);
        miCut.setAccelerator(ctrX);
        miPaste.setAccelerator(ctrV);
        miSelectAll.setAccelerator(ctrA);
        miOpen.setAccelerator(ctrO);
        miSave.setAccelerator(ctrS);
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();
        Menu = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        miOpen = new javax.swing.JMenuItem();
        miSave = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        miCopy = new javax.swing.JMenuItem();
        miCut = new javax.swing.JMenuItem();
        miPaste = new javax.swing.JMenuItem();
        miSelectAll = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtArea.setColumns(20);
        txtArea.setRows(5);
        jScrollPane1.setViewportView(txtArea);

        Menu.setMinimumSize(new java.awt.Dimension(400, 200));

        jMenu1.setText("File");

        miOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        miOpen.setText("Open");
        miOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miOpenActionPerformed(evt);
            }
        });
        jMenu1.add(miOpen);

        miSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        miSave.setText("Save File");
        miSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSaveActionPerformed(evt);
            }
        });
        jMenu1.add(miSave);

        Menu.add(jMenu1);

        jMenu2.setText("Edit");
        jMenu2.setPreferredSize(new java.awt.Dimension(90, 90));

        miCopy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        miCopy.setText("Copy");
        miCopy.setToolTipText("");
        miCopy.addMenuKeyListener(new javax.swing.event.MenuKeyListener() {
            public void menuKeyPressed(javax.swing.event.MenuKeyEvent evt) {
                miCopyMenuKeyPressed(evt);
            }
            public void menuKeyReleased(javax.swing.event.MenuKeyEvent evt) {
            }
            public void menuKeyTyped(javax.swing.event.MenuKeyEvent evt) {
            }
        });
        miCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miCopyActionPerformed(evt);
            }
        });
        jMenu2.add(miCopy);

        miCut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        miCut.setText("Cut");
        miCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miCutActionPerformed(evt);
            }
        });
        jMenu2.add(miCut);

        miPaste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        miPaste.setText("Paste");
        miPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miPasteActionPerformed(evt);
            }
        });
        jMenu2.add(miPaste);

        miSelectAll.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        miSelectAll.setText("Select All");
        miSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSelectAllActionPerformed(evt);
            }
        });
        jMenu2.add(miSelectAll);

        Menu.add(jMenu2);

        setJMenuBar(Menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void miSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSelectAllActionPerformed
        txtArea.selectAll();
    }//GEN-LAST:event_miSelectAllActionPerformed

    private void miCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miCopyActionPerformed
        if(txtArea.getSelectedText() != null){
            storeText = txtArea.getSelectedText();
        }
    }//GEN-LAST:event_miCopyActionPerformed

    private void miCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miCutActionPerformed
        if(txtArea.getSelectedText() != null){
//            System.out.println("Q" + txtArea.getSelectedText());
            storeText = txtArea.getSelectedText(); 
            txtArea.setText(txtArea.getText().replace(txtArea.getSelectedText(), ""));  
           
        }
        
    }//GEN-LAST:event_miCutActionPerformed

    private void miPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miPasteActionPerformed
        if(storeText != null){
            if(txtArea.getSelectedText() != null){
                txtArea.setText(txtArea.getText().replace(txtArea.getSelectedText(), storeText));
            }else{
                int cursorPosition = txtArea.getCaretPosition();
                txtArea.insert(storeText, cursorPosition);
                
            }            
        }
    }//GEN-LAST:event_miPasteActionPerformed

    private void miCopyMenuKeyPressed(javax.swing.event.MenuKeyEvent evt) {//GEN-FIRST:event_miCopyMenuKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_miCopyMenuKeyPressed

    private void miOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miOpenActionPerformed
        if(!oldText.equals(txtArea.getText()) && fileDoesExist == true){
            int c = JOptionPane.showConfirmDialog(this,"Do you want to save","File change", JOptionPane.YES_NO_OPTION);
            if(c == JOptionPane.YES_OPTION){
                saveOldFile();
                loadFile();
            }else{
                loadFile();
            }
        }else if(!oldText.equals(txtArea.getText()) && fileDoesExist == false){
            int c = JOptionPane.showConfirmDialog(this,"Do you want to save","File change", JOptionPane.YES_NO_OPTION);
            if(c == JOptionPane.YES_OPTION){
                saveFile();
                loadFile();
            }else{
                loadFile();
            }            
            
        }else{
            loadFile();
        }
        oldText = txtArea.getText();
       
    }//GEN-LAST:event_miOpenActionPerformed

    private void miSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSaveActionPerformed
        saveFile();
    }//GEN-LAST:event_miSaveActionPerformed
    
    public void saveOldFile(){
        File f = null;
        PrintWriter w = null;
        try {
          
                f = new File(fileDicrectory);
                w = new PrintWriter(f);
                String[] line = txtArea.getText().split("\n");
                for(int i = 0; i < line.length; i++){
                    w.write(line[i]);
                    w.write(13);
                    System.out.println(line[i]);
                    w.flush();
                }
            
        } catch (Exception e) {
        }finally{
            try {
                if(w != null){
                    w.close();
                }
            } catch (Exception e) {
            }
        }      
    }
    
    public void saveFile(){
        JFileChooser ch = new JFileChooser();
        ch.setCurrentDirectory(new java.io.File("."));
        File f = null;
        PrintWriter w = null;
      
        int c = ch.showSaveDialog(this);
        
        try {
            if(c ==  JFileChooser.APPROVE_OPTION){
                f = ch.getSelectedFile();
                w = new PrintWriter(f);
                String[] line = txtArea.getText().split("\n");
                for(int i = 0; i < line.length; i++){
                    w.write(line[i]);
                    w.write(13);
//                    System.out.println(line[i]);
                    w.flush();
                }
            }
        } catch (Exception e) {
        }finally{
            try {
                if(w != null){
                    w.close();
                }
            } catch (Exception e) {
            }
        }
        change = false;        
    }
    
    public void loadFile(){
        JFileChooser ch = new JFileChooser();
        ch.setCurrentDirectory(new java.io.File("."));
        File f;
        FileReader fr = null;
        BufferedReader br = null;
        try {
            int c = ch.showOpenDialog(this);
            if(c == JFileChooser.APPROVE_OPTION){
                fileDoesExist = true;
                txtArea.setText("");
                f = ch.getSelectedFile();
                fileDicrectory = f.getAbsolutePath();
//                System.out.println(f.toString());
                if(f.exists() && f.isFile()){
                    fr = new FileReader(f);
                    br = new BufferedReader(fr);
                    while(br.ready()){
                        String line = br.readLine();
//                        System.out.println(line);
                        txtArea.append(line+"\n");
                        
                    }
                }
            }
        } catch (Exception e) {
        }finally{
            try {
                if(fr != null){
                    fr.close();
                }
                if(br != null){
                    br.close();
                }                
                } catch (Exception e) {
                    e.printStackTrace();
            }
        }         
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MangHinh.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MangHinh.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MangHinh.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MangHinh.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MangHinh().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar Menu;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem miCopy;
    private javax.swing.JMenuItem miCut;
    private javax.swing.JMenuItem miOpen;
    private javax.swing.JMenuItem miPaste;
    private javax.swing.JMenuItem miSave;
    private javax.swing.JMenuItem miSelectAll;
    private javax.swing.JTextArea txtArea;
    // End of variables declaration//GEN-END:variables
}
